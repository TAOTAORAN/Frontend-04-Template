<script>
    /* 字符串分析算法|字典树 */
    let $ = Symbol("$");
    class Trie {
        constructor () {
            // 避免受到Object.prototype原型上的污染 (本例每次存一个字符串其实不存在污染问题)
            this.root = Object.create(null);
        }

        insert (word) {
            let node = this.root;
            for (let c of word) {
                if (!node[c]) {
                    node[c] = Object.create(null);
                }
                node = node[c];
                console.log(this.root);
            }
            // $ 用作截止符
            if (!($ in node)) {
                node[$] = 0;
            }
            node[$] ++;
            console.log(this.root);
        }

        most () {
            let max = 0;
            let maxWord = null;
            let visit = (node, word) => {
                if (node[$] && node[$] > max) {
                    max = node[$];
                    maxWord = word;
                }
                for (let p in node) {
                    visit(node[p], word + p);
                }
            }
            visit(this.root, "");
            console.log(maxWord, max);
        }

    }

    function randomWord (length) {
        let s = "";
        for (let i = 0; i < length; i++) {
            s += String.fromCharCode(Math.random() * 26 + "a".charCodeAt(0));
        }
        return s;
    }

    let trie = new Trie();
    for (let i = 0; i < 100; i++) {
        trie.insert(randomWord(4));
    }
    console.log(trie);
    trie.most();

</script>